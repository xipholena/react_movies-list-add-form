{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","inputTitle","inputImdbId","correctImageUrl","correctDataBaseUrl","disabledButton","this","setState","e","name","target","value","length","noEmptyInputs","valid","dataset","test","onAdd","props","method","action","onSubmit","clearForm","type","placeholder","classNames","onChange","onBlur","checkFormCorrect","validateInput","data-valid","checkUrlCorrect","disabled","Component","App","moviesFromServer","addMovie","preventDefault","currentState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c916a7fa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    inputTitle: false,\n    inputImdbId: false,\n    correctImageUrl: false,\n    correctDataBaseUrl: false,\n    disabledButton: true,\n  };\n\n  clearForm() {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      disabledButton: true,\n    });\n  }\n\n  validateInput(e) {\n    const { name } = e.target;\n\n    if (e.target.value.length < 3) {\n      this.setState({\n        [name]: true,\n      });\n    } else {\n      this.setState({\n        [name]: false,\n      });\n    }\n  }\n\n  checkFormCorrect() {\n    const { title, imgUrl, imdbUrl, imdbId, inputTitle,\n      correctImageUrl, correctDataBaseUrl, inputImdbId } = this.state;\n\n    const noEmptyInputs = title.length > 0 && imgUrl.length > 0\n    && imdbUrl.length > 0 && imdbId.length > 0;\n\n    const noErrorMessages = !inputTitle && !correctImageUrl\n    && !correctDataBaseUrl && !inputImdbId;\n\n    if (noErrorMessages && noEmptyInputs) {\n      this.setState({\n        disabledButton: false,\n      });\n    } else {\n      this.setState({\n        disabledButton: true,\n      });\n    }\n  }\n\n  checkUrlCorrect(e) {\n    const { valid } = e.target.dataset;\n\n    // eslint-disable-next-line\n    if (/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(e.target.value)) {\n      this.setState({\n        [valid]: false,\n      });\n    } else {\n      this.setState({\n        [valid]: true,\n      });\n    }\n  }\n\n  render() {\n    const { onAdd } = this.props;\n    const { title, description, imgUrl, imdbUrl, imdbId,\n      inputTitle, inputImdbId,\n      disabledButton, correctImageUrl, correctDataBaseUrl } = this.state;\n\n    return (\n      <form\n        method=\"POST\"\n        action=\"/api/Movies\"\n        className=\"form\"\n        onSubmit={(e) => {\n          const movie = {\n            title,\n            description,\n            imgUrl,\n            imdbUrl,\n            imdbId,\n          };\n\n          onAdd(e, movie);\n          this.clearForm();\n        }}\n      >\n        <label className=\"form__label\">\n          <input\n            type=\"text\"\n            placeholder=\"Title\"\n            name=\"inputTitle\"\n            value={title}\n            className={classNames('form__input', {\n              'form__input--error': inputTitle,\n            })}\n            onChange={(e) => {\n              this.setState({\n                title: e.target.value,\n              });\n            }}\n            onBlur={(e) => {\n              this.checkFormCorrect();\n              this.validateInput(e);\n            }}\n          />\n          {inputTitle\n          && <p className=\"form__error\">Please, enter the title</p>}\n        </label>\n\n        <label className=\"form__label\">\n          <input\n            type=\"text\"\n            placeholder=\"Description\"\n            name=\"description\"\n            value={description}\n            className=\"form__input\"\n            onChange={(e) => {\n              this.setState({\n                description: e.target.value,\n              });\n            }}\n          />\n        </label>\n\n        <label className=\"form__label\">\n          <input\n            type=\"text\"\n            placeholder=\"image url\"\n            name=\"inputImgUrl\"\n            data-valid=\"correctImageUrl\"\n            value={imgUrl}\n            className={classNames('form__input', {\n              'form__input--error': correctImageUrl,\n            })}\n            onChange={(e) => {\n              this.setState({\n                imgUrl: e.target.value,\n              });\n            }}\n            onBlur={(e) => {\n              this.checkFormCorrect();\n              this.validateInput(e);\n              this.checkUrlCorrect(e);\n            }}\n          />\n          {correctImageUrl\n          && <p className=\"form__error\">URL should be correct</p>}\n\n        </label>\n\n        <label className=\"form__label\">\n          <input\n            type=\"text\"\n            placeholder=\"IMDB url\"\n            value={imdbUrl}\n            name=\"inputImdbUrl\"\n            data-valid=\"correctDataBaseUrl\"\n            className={classNames('form__input', {\n              'form__input--error': correctDataBaseUrl,\n            })}\n            onChange={(e) => {\n              this.setState({\n                imdbUrl: e.target.value,\n              });\n            }}\n            onBlur={(e) => {\n              this.checkFormCorrect();\n              this.validateInput(e);\n              this.checkUrlCorrect(e);\n            }}\n          />\n          {correctDataBaseUrl\n          && <p className=\"form__error\">URL should be correct</p>}\n\n        </label>\n\n        <label className=\"form__label\">\n          <input\n            type=\"text\"\n            placeholder=\"IMDB id\"\n            value={imdbId}\n            name=\"inputImdbId\"\n            className={classNames('form__input', {\n              'form__input--error': inputImdbId,\n            })}\n            onChange={(e) => {\n              this.setState({\n                imdbId: e.target.value,\n              });\n            }}\n            onBlur={(e) => {\n              this.checkFormCorrect();\n              this.validateInput(e);\n            }}\n          />\n          {inputImdbId\n            && <p className=\"form__error\">Please, enter the IMBD id</p>}\n        </label>\n\n        <button\n          className=\"form__button\"\n          disabled={disabledButton}\n          type=\"submit\"\n        >\n          Add new movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: [...moviesFromServer],\n  };\n\n  addMovie = (e, movie) => {\n    e.preventDefault();\n    this.setState(currentState => ({\n      movies: [\n        ...currentState.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <h1 className=\"sidebar__title\">\n            Add new movie to the list\n          </h1>\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}